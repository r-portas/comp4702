% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 28-Apr-2017 09:08:10
%

load('mnist_train.mat');
load('mnist_test.mat');

all_labels = [train_labels; test_labels];
all_X = [train_X; test_X];
labels = [];
for i = 1:10
    labels = [labels, all_labels == i];
end

x = transpose(all_X);
t = transpose(labels);

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.

trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.
%trainFcn = 'traingd';

% Create a Pattern Recognition Network
hiddenLayerSize = 20;
net = patternnet(hiddenLayerSize, trainFcn);

net.trainParam.epochs = 1000;
% net.trainParam.lr = 0.1;

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 5/7;
net.divideParam.valRatio = 1/7;
% 1/7 of the dataset is the testing data, which is at the end
net.divideParam.testRatio = 1/7;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

percentErrors
